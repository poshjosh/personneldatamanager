############################################################
#  	Default Logging Configuration File
#
# You can use a different file by specifying a filename
# with the java.util.logging.config.file system property.  
# For example java -Djava.util.logging.config.file=myfile
############################################################

############################################################
#  	Global properties
############################################################

# "handlers" specifies a comma separated list of log Handler 
# classes.  These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will only
# show messages at the INFO and above levels.
handlers= java.util.logging.ConsoleHandler

# To also add the FileHandler, use the following line instead.
#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
#.level = FINE
#com.doctracker.basic.ui.actions.SaveOutput.level = FINE
#com.doctracker.basic.parameter.SelectedTasksParametersBuilder.level = FINE

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# default file output is in user's home directory.
#@related root folder, logs folder
java.util.logging.FileHandler.pattern = %h/bcpdm/logs/%u.log
java.util.logging.FileHandler.append = true
java.util.logging.FileHandler.limit = 100000
java.util.logging.FileHandler.count = 10
# java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter

# Limit the message that are printed on the console to INFO and above.
java.util.logging.ConsoleHandler.level = FINER
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

# Example to customize the SimpleFormatter output format 
# to print one-line log message like this:
#     <level>: <log message> [<date/time>]
#
# java.util.logging.SimpleFormatter.format=%4$s: %5$s [%1$tc]%n

############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################

# For example, set the com.xyz.foo logger to only log SEVERE
# messages:
# com.xyz.foo.level = SEVERE
java.level = INFO
sun.level = INFO
sun.awt.level = INFO
javax.level = INFO
javax.swing.level = INFO
sun.level = INFO
com.sun.level = INFO
com.mysql.level = INFO
org.level = INFO

#com.bc.level = FINE
com.pdm.level = FINE
#com.bc.util.MapBuilderImpl.level = FINER
# com.bc.appbase.xls.impl.level = FINE
#com.bc.appbase.ui.builder.impl.level = FINER
#com.bc.appcore.jpa.JpaTypeProvider.level = FINER
#com.bc.appbase.ui.model.ResultModelImpl.level = FINER
#com.bc.appbase.ui.builder.impl.UIBuilderFromEntity.level = FINER



